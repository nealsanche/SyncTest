apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'realm-android'
apply plugin: 'me.tatarka.retrolambda'


// Code to calculate the version numbers directly from Git tags.
// NOTE: Make sure there's at least one git tag in the repository
// before making builds.
def getVersionCode = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'tag', '--list'
            standardOutput = code
        }
        return code.toString().split("\n").size()
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--match=[^(hudson)].*', '--tags', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.1"

    defaultConfig {
        applicationId "com.robotsandpencils.androidtemplate"
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        versionName getVersionName()
        versionCode getVersionCode()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "androidtemplate")
    }

    dataBinding {
        enabled = true
    }

    signingConfigs {
        debug {
            storeFile file("debug-key.keystore.jks")
            storePassword "abc123"
            keyAlias "android"
            keyPassword "abc123"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        development {
            buildConfigField 'boolean', 'DEVELOPMENT', 'true'
            buildConfigField 'boolean', 'STAGING', 'false'
            buildConfigField 'boolean', 'PRODUCTION', 'false'
            signingConfig signingConfigs.debug
        }
        staging {
            buildConfigField 'boolean', 'DEVELOPMENT', 'false'
            buildConfigField 'boolean', 'STAGING', 'true'
            buildConfigField 'boolean', 'PRODUCTION', 'false'
            signingConfig signingConfigs.debug
        }
        production {
            buildConfigField 'boolean', 'DEVELOPMENT', 'false'
            buildConfigField 'boolean', 'STAGING', 'false'
            buildConfigField 'boolean', 'PRODUCTION', 'true'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        maxProcessCount 2
        javaMaxHeapSize "2g"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:design:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    compile "com.android.support:customtabs:$supportLibraryVersion"

    // REST
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'

    // Rx
    compile 'io.reactivex:rxjava:1.1.9'
    compile 'io.reactivex:rxandroid:1.2.0'
    compile 'com.trello:rxlifecycle:0.6.1'
    compile 'com.trello:rxlifecycle-components:0.6.1'
    compile 'com.minimize.android:rxrecycler-adapter:1.2.1'

    // Dagger 2
    compile "com.google.dagger:dagger:$daggerVersion"
    apt "com.google.dagger:dagger-compiler:$daggerVersion"
    provided 'org.glassfish:javax.annotation:10.0-b28'

    // Event bus
    compile 'com.squareup:otto:1.3.8'

    // Fonts
    compile 'uk.co.chrisjenx:calligraphy:2.1.0'

    // Logging
    compile 'com.jakewharton.timber:timber:4.1.0'

    // Unit testing
    testCompile 'junit:junit:4.12'

    // Espresso Testing
    androidTestApt "com.google.dagger:dagger-compiler:$daggerVersion"
    androidTestCompile "com.github.crittercism.dexmaker:dexmaker-parent:$dexmakerVersion"
    androidTestCompile "com.github.crittercism.dexmaker:dexmaker-mockito:$dexmakerVersion"
    androidTestCompile "com.github.crittercism.dexmaker:dexmaker-dx:$dexmakerVersion"
    androidTestCompile "com.github.crittercism.dexmaker:dexmaker:$dexmakerVersion"
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2') {
        exclude group: 'javax.inject', module: 'javax.inject'
        exclude group: 'com.squareup', module: 'javawriter'
    }
    androidTestCompile 'com.github.fabioCollini:DaggerMock:0.6'

    // Debug Mock Web Server
    debugCompile "com.squareup.okhttp3:mockwebserver:3.2.0"

    // Fixes a problem with Databinding and Dagger 2.6
    apt 'com.google.guava:guava:19.0'
}

configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$supportLibraryVersion"
    resolutionStrategy.force "com.google.dagger:dagger:$daggerVersion"
    resolutionStrategy.force "junit:junit:4.12"
}

/*
 * Workaround for https://code.google.com/p/android/issues/detail?id=182715
 *
 * The Android Gradle plugin is creating DataBindingExportBuildInfoTasks for the instrumentation
 * APK that generates from the app APKs layouts. This creates duplicate classes in the app and
 * instrumentation APK which leads to
 *      java.lang.IllegalAccessError: Class ref in pre-verified class resolved to unexpected implementation
 * on older devices.
 *
 * The workaround is to get the DataBindingExportBuildInfoTasks tasks for the instrumentation APK
 * and delete the files right after it creates them.
 */
tasks.withType(com.android.build.gradle.internal.tasks.databinding.DataBindingExportBuildInfoTask) { task ->
    if (task.name.endsWith("AndroidTest")) {
        task.finalizedBy(tasks.create("${task.name}Workaround") << {
            task.output.deleteDir()
        })
    }
}
